#!/usr/bin/env sh

FAIL_COLOUR=$'\033[31;1m'
PASS_COLOUR=$'\033[32;1m'
END_COLOUR=$'\033[0m'

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
TEMPLATEDIR="${DIR/scripts/config\/templates\/}"
COLOURSDIR="${DIR/scripts/config\/color-schemes\/}"

declare -A TEMPLATES
TEMPLATES[termite]="$HOME/.config/termite/config"
TEMPLATES[dunstrc]="$HOME/.config/dunst/dunstrc"
TEMPLATES[gtk2.0]="$HOME/.themes/FlatColor/gtk-2.0/gtkrc"
TEMPLATES[gtk3.0]="$HOME/.themes/FlatColor/gtk-3.0/gtk.css"
TEMPLATES[gtk3.20]="$HOME/.themes/FlatColor/gtk-3.20/gtk.css"
TEMPLATES[i3]="$HOME/.config/i3/config"
TEMPLATES[lock-i3.sh]="$HOME/lock-i3.sh"
TEMPLATES[polybar]="$HOME/.config/polybar/config"
TEMPLATES[rofi]="$HOME/.config/rofi/config"
TEMPLATES[rofi.theme]="$HOME/.config/rofi/themes/wpg.rasi"
TEMPLATES[gtk-3.0-settings.ini]="$HOME/.config/gtk-3.0/settings.ini"
TEMPLATES[gtkrc-2.0]="$HOME/.gtkrc-2.0"
TEMPLATES[atom-config.cson]="$HOME/.atom/config.cson"

COLOURSCHEMES=($COLOURSDIR*)
SELECTEDCOLOURSCHEME=-1
CONKY_STYLE=-1

# Which colour scheme?

while [ $SELECTEDCOLOURSCHEME == -1 ]; do
  printf "The following colour schemes are available:\n\n"

  for ((i=0; i < ${#COLOURSCHEMES[@]}; i++)); do
    echo "$i - ${COLOURSCHEMES[$i]/$COLOURSDIR/}"
  done
  printf "\nWhich colour scheme would you like? (just enter the number)... "
  read COLOURSCHEMENUMBER
  [ ${COLOURSCHEMES[$COLOURSCHEMENUMBER]+exists} ] \
    && SELECTEDCOLOURSCHEME="$COLOURSCHEMENUMBER" \
    || printf "$FAIL_COLOUR\nInvalid selection\n\n$END_COLOUR"
done

GTKTHEMENAME="${COLOURSCHEMES[$SELECTEDCOLOURSCHEME]/$COLOURSDIR/}"

# Which Conky style?

while [ $CONKY_STYLE != 'l' ] && [ $CONKY_STYLE != 'd' ]; do
  printf "\nWould you like a (l)ight or a (d)ark conky?   "
  read CONKY_STYLE
  if [ $CONKY_STYLE != 'l' ] && [ $CONKY_STYLE != 'd' ]; then
    printf "$FAIL_COLOUR\nInvalid selection - please enter l or d\n\n$END_COLOUR"
  fi
done

TEMPLATES["conky_$CONKY_STYLE"]="$HOME/.config/conky/conky"

# Parse and generate

printf "\n\nParsing ${COLOURSCHEMES[$SELECTEDCOLOURSCHEME]}...\n\n"

eval source $(printf %q "${COLOURSCHEMES[$SELECTEDCOLOURSCHEME]}")

for i in "${!TEMPLATES[@]}"; do
  FILE="$TEMPLATEDIR$i"
  OUT="${TEMPLATES[$i]}"
  printf "Generating $OUT\n"
  cat $FILE | sed -e s/\<GTKTHEMENAME\>/"$GTKTHEMENAME"/g \
                  -e s/\<GTKTHEMEBG1\>/$GTKTHEMEBG1/g \
                  -e s/\<GTKTHEMEBG2\>/$GTKTHEMEBG2/g \
                  -e s/\<GTKTHEMEBG3\>/$GTKTHEMEBG3/g \
                  -e s/\<GTKTHEMEBG4\>/$GTKTHEMEBG4/g \
                  -e s/\<GTKTHEMEFG1\>/$GTKTHEMEFG1/g \
                  -e s/\<GTKTHEMEFG2\>/$GTKTHEMEFG2/g \
                  -e s/\<GTKTHEMEHI\>/$GTKTHEMEHI/g \
                  -e s/\<GTKTHEMEURGENT\>/"$GTKTHEMEURGENT"/g \
                  -e s/\<GTKTHEMEBG1RGB\>/"$GTKTHEMEBG1RGB"/g \
                  -e s/\<GTKTHEMEBG2RGB\>/"$GTKTHEMEBG2RGB"/g \
                  -e s/\<GTKTHEMEBG3RGB\>/"$GTKTHEMEBG3RGB"/g \
                  -e s/\<GTKTHEMEBG4RGB\>/"$GTKTHEMEBG4RGB"/g \
                  -e s/\<GTKTHEMEFG1RGB\>/"$GTKTHEMEFG1RGB"/g \
                  -e s/\<GTKTHEMEFG2RGB\>/"$GTKTHEMEFG2RGB"/g \
                  -e s/\<GTKTHEMEHIRGB\>/"$GTKTHEMEHIRGB"/g \
                  -e s/\<GTKTHEMEURGENTRGB\>/"$GTKTHEMEURGENTRGB"/g \
                  -e s/\<ATOMUITHEME\>/"$ATOMUITHEME"/g \
                  -e s/\<ATOMSYNTAXTHEME\>/"$ATOMSYNTAXTHEME"/g \
  | tee $OUT 1>/dev/null
done

gsettings set org.gnome.desktop.interface gtk-theme "$GTKTHEMENAME"
gsettings set org.gnome.desktop.wm.preferences theme "$GTKTHEMENAME"

chmod +x "$HOME/lock-i3.sh"

printf "Restarting i3..."

i3-msg restart

printf "$PASS_COLOUR\n\nDONE$END_COLOUR\n"
